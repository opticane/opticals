// Generated by gencpp from file ivr_assignment/State.msg
// DO NOT EDIT!


#ifndef IVR_ASSIGNMENT_MESSAGE_STATE_H
#define IVR_ASSIGNMENT_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ivr_assignment/Point.h>
#include <ivr_assignment/Point.h>
#include <ivr_assignment/Point.h>
#include <ivr_assignment/Point.h>
#include <ivr_assignment/Point.h>

namespace ivr_assignment
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : red()
    , green()
    , blue()
    , sphere()
    , box()  {
    }
  State_(const ContainerAllocator& _alloc)
    : red(_alloc)
    , green(_alloc)
    , blue(_alloc)
    , sphere(_alloc)
    , box(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ivr_assignment::Point_<ContainerAllocator>  _red_type;
  _red_type red;

   typedef  ::ivr_assignment::Point_<ContainerAllocator>  _green_type;
  _green_type green;

   typedef  ::ivr_assignment::Point_<ContainerAllocator>  _blue_type;
  _blue_type blue;

   typedef  ::ivr_assignment::Point_<ContainerAllocator>  _sphere_type;
  _sphere_type sphere;

   typedef  ::ivr_assignment::Point_<ContainerAllocator>  _box_type;
  _box_type box;





  typedef boost::shared_ptr< ::ivr_assignment::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ivr_assignment::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::ivr_assignment::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::ivr_assignment::State > StatePtr;
typedef boost::shared_ptr< ::ivr_assignment::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ivr_assignment::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ivr_assignment::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ivr_assignment::State_<ContainerAllocator1> & lhs, const ::ivr_assignment::State_<ContainerAllocator2> & rhs)
{
  return lhs.red == rhs.red &&
    lhs.green == rhs.green &&
    lhs.blue == rhs.blue &&
    lhs.sphere == rhs.sphere &&
    lhs.box == rhs.box;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ivr_assignment::State_<ContainerAllocator1> & lhs, const ::ivr_assignment::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ivr_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ivr_assignment::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ivr_assignment::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ivr_assignment::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ivr_assignment::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivr_assignment::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivr_assignment::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ivr_assignment::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55bfea8321e47e17ccacb3d3544eea41";
  }

  static const char* value(const ::ivr_assignment::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55bfea8321e47e17ULL;
  static const uint64_t static_value2 = 0xccacb3d3544eea41ULL;
};

template<class ContainerAllocator>
struct DataType< ::ivr_assignment::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ivr_assignment/State";
  }

  static const char* value(const ::ivr_assignment::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ivr_assignment::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Joint positions\n"
"Point red\n"
"Point green\n"
"Point blue\n"
"\n"
"# Target positions\n"
"Point sphere\n"
"Point box\n"
"================================================================================\n"
"MSG: ivr_assignment/Point\n"
"# Position of object in 3D space\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"bool hidden\n"
;
  }

  static const char* value(const ::ivr_assignment::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ivr_assignment::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.red);
      stream.next(m.green);
      stream.next(m.blue);
      stream.next(m.sphere);
      stream.next(m.box);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ivr_assignment::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ivr_assignment::State_<ContainerAllocator>& v)
  {
    s << indent << "red: ";
    s << std::endl;
    Printer< ::ivr_assignment::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.red);
    s << indent << "green: ";
    s << std::endl;
    Printer< ::ivr_assignment::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.green);
    s << indent << "blue: ";
    s << std::endl;
    Printer< ::ivr_assignment::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.blue);
    s << indent << "sphere: ";
    s << std::endl;
    Printer< ::ivr_assignment::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.sphere);
    s << indent << "box: ";
    s << std::endl;
    Printer< ::ivr_assignment::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IVR_ASSIGNMENT_MESSAGE_STATE_H
