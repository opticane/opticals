// Generated by gencpp from file ivr_assignment/Angles.msg
// DO NOT EDIT!


#ifndef IVR_ASSIGNMENT_MESSAGE_ANGLES_H
#define IVR_ASSIGNMENT_MESSAGE_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ivr_assignment
{
template <class ContainerAllocator>
struct Angles_
{
  typedef Angles_<ContainerAllocator> Type;

  Angles_()
    : theta_1(0.0)
    , theta_2(0.0)
    , theta_3(0.0)
    , theta_4(0.0)  {
    }
  Angles_(const ContainerAllocator& _alloc)
    : theta_1(0.0)
    , theta_2(0.0)
    , theta_3(0.0)
    , theta_4(0.0)  {
  (void)_alloc;
    }



   typedef double _theta_1_type;
  _theta_1_type theta_1;

   typedef double _theta_2_type;
  _theta_2_type theta_2;

   typedef double _theta_3_type;
  _theta_3_type theta_3;

   typedef double _theta_4_type;
  _theta_4_type theta_4;





  typedef boost::shared_ptr< ::ivr_assignment::Angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ivr_assignment::Angles_<ContainerAllocator> const> ConstPtr;

}; // struct Angles_

typedef ::ivr_assignment::Angles_<std::allocator<void> > Angles;

typedef boost::shared_ptr< ::ivr_assignment::Angles > AnglesPtr;
typedef boost::shared_ptr< ::ivr_assignment::Angles const> AnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ivr_assignment::Angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ivr_assignment::Angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ivr_assignment::Angles_<ContainerAllocator1> & lhs, const ::ivr_assignment::Angles_<ContainerAllocator2> & rhs)
{
  return lhs.theta_1 == rhs.theta_1 &&
    lhs.theta_2 == rhs.theta_2 &&
    lhs.theta_3 == rhs.theta_3 &&
    lhs.theta_4 == rhs.theta_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ivr_assignment::Angles_<ContainerAllocator1> & lhs, const ::ivr_assignment::Angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ivr_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ivr_assignment::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ivr_assignment::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ivr_assignment::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ivr_assignment::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivr_assignment::Angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivr_assignment::Angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ivr_assignment::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "617622430535c6b3b6c6968cba8cad3e";
  }

  static const char* value(const ::ivr_assignment::Angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x617622430535c6b3ULL;
  static const uint64_t static_value2 = 0xb6c6968cba8cad3eULL;
};

template<class ContainerAllocator>
struct DataType< ::ivr_assignment::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ivr_assignment/Angles";
  }

  static const char* value(const ::ivr_assignment::Angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ivr_assignment::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Joint angles of the robot\n"
"\n"
"float64 theta_1 # Yellow joint\n"
"float64 theta_2 # Blue joint (#1)\n"
"float64 theta_3 # Blue joint (#2)\n"
"float64 theta_4 # Green joint\n"
;
  }

  static const char* value(const ::ivr_assignment::Angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ivr_assignment::Angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta_1);
      stream.next(m.theta_2);
      stream.next(m.theta_3);
      stream.next(m.theta_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ivr_assignment::Angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ivr_assignment::Angles_<ContainerAllocator>& v)
  {
    s << indent << "theta_1: ";
    Printer<double>::stream(s, indent + "  ", v.theta_1);
    s << indent << "theta_2: ";
    Printer<double>::stream(s, indent + "  ", v.theta_2);
    s << indent << "theta_3: ";
    Printer<double>::stream(s, indent + "  ", v.theta_3);
    s << indent << "theta_4: ";
    Printer<double>::stream(s, indent + "  ", v.theta_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IVR_ASSIGNMENT_MESSAGE_ANGLES_H
