# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ivr_assignment/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ivr_assignment.msg

class State(genpy.Message):
  _md5sum = "55bfea8321e47e17ccacb3d3544eea41"
  _type = "ivr_assignment/State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# Joint positions
Point red
Point green
Point blue

# Target positions
Point sphere
Point box
================================================================================
MSG: ivr_assignment/Point
# Position of object in 3D space

float64 x
float64 y
float64 z

bool hidden"""
  __slots__ = ['red','green','blue','sphere','box']
  _slot_types = ['ivr_assignment/Point','ivr_assignment/Point','ivr_assignment/Point','ivr_assignment/Point','ivr_assignment/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       red,green,blue,sphere,box

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.red is None:
        self.red = ivr_assignment.msg.Point()
      if self.green is None:
        self.green = ivr_assignment.msg.Point()
      if self.blue is None:
        self.blue = ivr_assignment.msg.Point()
      if self.sphere is None:
        self.sphere = ivr_assignment.msg.Point()
      if self.box is None:
        self.box = ivr_assignment.msg.Point()
    else:
      self.red = ivr_assignment.msg.Point()
      self.green = ivr_assignment.msg.Point()
      self.blue = ivr_assignment.msg.Point()
      self.sphere = ivr_assignment.msg.Point()
      self.box = ivr_assignment.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dB3dB3dB3dB3dB().pack(_x.red.x, _x.red.y, _x.red.z, _x.red.hidden, _x.green.x, _x.green.y, _x.green.z, _x.green.hidden, _x.blue.x, _x.blue.y, _x.blue.z, _x.blue.hidden, _x.sphere.x, _x.sphere.y, _x.sphere.z, _x.sphere.hidden, _x.box.x, _x.box.y, _x.box.z, _x.box.hidden))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.red is None:
        self.red = ivr_assignment.msg.Point()
      if self.green is None:
        self.green = ivr_assignment.msg.Point()
      if self.blue is None:
        self.blue = ivr_assignment.msg.Point()
      if self.sphere is None:
        self.sphere = ivr_assignment.msg.Point()
      if self.box is None:
        self.box = ivr_assignment.msg.Point()
      end = 0
      _x = self
      start = end
      end += 125
      (_x.red.x, _x.red.y, _x.red.z, _x.red.hidden, _x.green.x, _x.green.y, _x.green.z, _x.green.hidden, _x.blue.x, _x.blue.y, _x.blue.z, _x.blue.hidden, _x.sphere.x, _x.sphere.y, _x.sphere.z, _x.sphere.hidden, _x.box.x, _x.box.y, _x.box.z, _x.box.hidden,) = _get_struct_3dB3dB3dB3dB3dB().unpack(str[start:end])
      self.red.hidden = bool(self.red.hidden)
      self.green.hidden = bool(self.green.hidden)
      self.blue.hidden = bool(self.blue.hidden)
      self.sphere.hidden = bool(self.sphere.hidden)
      self.box.hidden = bool(self.box.hidden)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dB3dB3dB3dB3dB().pack(_x.red.x, _x.red.y, _x.red.z, _x.red.hidden, _x.green.x, _x.green.y, _x.green.z, _x.green.hidden, _x.blue.x, _x.blue.y, _x.blue.z, _x.blue.hidden, _x.sphere.x, _x.sphere.y, _x.sphere.z, _x.sphere.hidden, _x.box.x, _x.box.y, _x.box.z, _x.box.hidden))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.red is None:
        self.red = ivr_assignment.msg.Point()
      if self.green is None:
        self.green = ivr_assignment.msg.Point()
      if self.blue is None:
        self.blue = ivr_assignment.msg.Point()
      if self.sphere is None:
        self.sphere = ivr_assignment.msg.Point()
      if self.box is None:
        self.box = ivr_assignment.msg.Point()
      end = 0
      _x = self
      start = end
      end += 125
      (_x.red.x, _x.red.y, _x.red.z, _x.red.hidden, _x.green.x, _x.green.y, _x.green.z, _x.green.hidden, _x.blue.x, _x.blue.y, _x.blue.z, _x.blue.hidden, _x.sphere.x, _x.sphere.y, _x.sphere.z, _x.sphere.hidden, _x.box.x, _x.box.y, _x.box.z, _x.box.hidden,) = _get_struct_3dB3dB3dB3dB3dB().unpack(str[start:end])
      self.red.hidden = bool(self.red.hidden)
      self.green.hidden = bool(self.green.hidden)
      self.blue.hidden = bool(self.blue.hidden)
      self.sphere.hidden = bool(self.sphere.hidden)
      self.box.hidden = bool(self.box.hidden)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dB3dB3dB3dB3dB = None
def _get_struct_3dB3dB3dB3dB3dB():
    global _struct_3dB3dB3dB3dB3dB
    if _struct_3dB3dB3dB3dB3dB is None:
        _struct_3dB3dB3dB3dB3dB = struct.Struct("<3dB3dB3dB3dB3dB")
    return _struct_3dB3dB3dB3dB3dB
